// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
 // output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL") 
}

// prisma/schema.prisma

// ====================================================================
// Data Models (Tables)
// These define the structure of the database tables using Prisma's SDL.
// ====================================================================

// Model for the 'Property' table.
model Property {
  // Primary key for the property.
  // @id: Marks it as the primary key.
  // @default(uuid()): Automatically generates a UUID for new records.
  id              String    @id @default(uuid())
  // Title or name of the property (e.g., "Spacious House in Chuburná").
  title           String
  // Price of the property. Using Float to allow for decimal values.
  price           Float
  // Location or address of the property.
  location        String
  // URL to the main image of the property.
  image           String
  // Type of property (e.g., "Casa", "Apartamento", "Terreno").
  type            String
  // Number of bedrooms.
  bedrooms        Int
  // Number of bathrooms.
  bathrooms       Int
  // Operation type: "Venta" (Sale) or "Renta" (Rent).
  operation       String
  // Detailed description of the property. Optional field, can be null.
  description     String?
  // Relation to the PropertyImage model.
  // 'PropertyImage[]' indicates that one property can have many images.
  // This defines a one-to-many relationship.
  images          PropertyImage[]
  // Deposit amount for rental properties. Optional field.
  deposit         Float?
  // Construction area of the property (e.g., "200 m²"). Optional.
  constructionArea String?
  // Land area of the property (e.g., "300 m²"). Optional.
  landArea        String?
  // Indicates if the property is furnished (true/false). Optional.
  furnished       Boolean?
  // Timestamp for when the record was created.
  // @default(now()): Automatically sets the current timestamp on creation.
  createdAt       DateTime  @default(now())
  // Timestamp for when the record was last updated.
  // @updatedAt: Automatically updates the timestamp on every record modification.
  updatedAt       DateTime  @updatedAt
}

// Model for the 'PropertyImage' table.
// This table stores the URLs for the gallery images of each property.
model PropertyImage {
  // Primary key for the image record.
  id        String @id @default(uuid())
  // URL of the image.
  url       String
  // Relation back to the Property model.
  // 'property': Defines the inverse relationship (an image belongs to one property).
  // @relation(...): Sets up the foreign key relationship.
  // fields: [propertyId] -> The foreign key column in this table.
  // references: [id] -> The primary key in the related Property table.
  // onDelete: Cascade -> If a Property is deleted, its associated images are also deleted.
  property  Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  // Foreign key linking this image to a specific Property.
  propertyId String
}

// Models for authentication
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  hashedPassword String? // Added for CredentialsProvider
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? // Removed @db.Text
  access_token       String? // Removed @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? // Removed @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_sessionToken_unique_constraint") // Added @map for unique name
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // @@unique([sessionToken]) // This line is redundant if @unique is on the field, but NextAuth's adapter might expect it.
                           // Let's keep it and add a map to it as well for safety.
  @@unique([sessionToken], map: "Session_sessionToken_key") // Added map to the block as well
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}