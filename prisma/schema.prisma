// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
 // output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL") 
}

// prisma/schema.prisma

// ====================================================================
// Data Models (Tables)
// These define the structure of the database tables using Prisma's SDL.
// ====================================================================

// Model for the 'Property' table.
model Property {
  id               String    @id @default(uuid())
  title            String
  price            Float
  location         String
  image            String    // Main image URL (matches frontend field name 'image')
  type             String
  bedrooms         Int?      // Optional as per frontend (sends empty string if not filled)
  bathrooms        Int?      // Optional as per frontend (sends empty string if not filled)
  operation        String
  description      String    // Required as per frontend
  furnished        Boolean   @default(false) // Required with default as per frontend
  constructionArea String?   // Optional as per frontend
  landArea         String?   // Optional as per frontend
  images           PropertyImage[] // Relation to gallery images (PropertyImage model)

  // --- CRÍTICO: Relación con el usuario propietario ---
  ownerId          String // Clave foránea al usuario que posee esta propiedad
  owner            User      @relation(fields: [ownerId], references: [id])
  // --- FIN CRÍTICO ---

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@map("properties") // Asegura que el nombre de la tabla en la DB sea 'properties'
}

// Model for the 'PropertyImage' table.
model PropertyImage {
  id         String @id @default(uuid())
  url        String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String

  @@map("property_images") // Asegura el nombre de la tabla
}

// Asegúrate de que tu enum Role también esté definido así:
enum Role {
  CLIENT
  AGENT
  ADMIN
}


// Model for the 'User' table.
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  hashedPassword String?
  image         String?
  role          Role      @default(CLIENT)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  properties    Property[] // --- CRÍTICO: Relación inversa a Property model (propiedades creadas por este usuario) ---
}
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? // Removed @db.Text
  access_token       String? // Removed @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? // Removed @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_sessionToken_unique_constraint") // Added @map for unique name
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // @@unique([sessionToken]) // This line is redundant if @unique is on the field, but NextAuth's adapter might expect it.
                           // Let's keep it and add a map to it as well for safety.
  @@unique([sessionToken], map: "Session_sessionToken_key") // Added map to the block as well
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique // The actual token sent to the user
  email     String   // The email associated with the token
  expires   DateTime // When the token expires
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email]) // Index for faster lookups by email
}
